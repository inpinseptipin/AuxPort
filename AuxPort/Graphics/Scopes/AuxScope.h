#ifndef AUXPORT_GRAPHICS_SCOPE_H
#define AUXPORT_GRAPHICS_SCOPE_H

#include "../../Core/Env/AuxEnv.h"
#include <vector>
#include <unordered_map>
#include <string>

namespace AuxPort
{
	namespace Graphics
	{
		///////////////////////////////////////////////////////////////////////////////////////
		/// @brief This class provides a Circular Buffer for D
		///////////////////////////////////////////////////////////////////////////////////////
		class DrawBuffer
		{
		public:
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Default Constructor, This initializes the Buffer with size of 1024
			///////////////////////////////////////////////////////////////////////////////////////
			DrawBuffer();
			~DrawBuffer() = default;
			DrawBuffer(const DrawBuffer& drawBuffer) = default;
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief This function sets the size of the Buffer
			///////////////////////////////////////////////////////////////////////////////////////
			void setSize(size_t bufferSize);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief This function appends the buffer with samples
			///////////////////////////////////////////////////////////////////////////////////////
			void append(const float* buffer, size_t numberOfSamples);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Retrieves the size of the audio buffer
			///////////////////////////////////////////////////////////////////////////////////////
			size_t size();
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Gets the pointer to the internal buffer
			///////////////////////////////////////////////////////////////////////////////////////
			const float* getPointerToBuffer();
		protected:
			std::vector<float> buffer;
			size_t writeIndex;
			size_t drawBufferSize;
		};

		///////////////////////////////////////////////////////////////////////////////////////
		/// @brief This class provides Draw Buffers for Oscilloscopes
		///////////////////////////////////////////////////////////////////////////////////////
		class ScopeBuffers
		{
		public:
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Default Constructor for Scope Buffers
			///////////////////////////////////////////////////////////////////////////////////////
			ScopeBuffers() = default;
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Default Destructor for Scope Buffers
			///////////////////////////////////////////////////////////////////////////////////////
			~ScopeBuffers() = default;
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Copy Constructor for Scope Buffers
			///////////////////////////////////////////////////////////////////////////////////////
			ScopeBuffers(const ScopeBuffers& scopeBuffer) = default;
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Sets the IDs and sizes of Buffer
			///////////////////////////////////////////////////////////////////////////////////////
			void setBufferSize(const std::vector<std::string>& bufferIDS, const std::vector<size_t> bufferSizes);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Appends the samples to a particular Buffer ID
			///////////////////////////////////////////////////////////////////////////////////////
			void appendToBuffer(const std::string& bufferID, const float* buffer, size_t numberOfSamples);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Returns the size for a particular Buffer ID
			///////////////////////////////////////////////////////////////////////////////////////
			size_t size(const std::string& bufferID);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Gets pointer to the particular buffer ID
			///////////////////////////////////////////////////////////////////////////////////////
			const float* getPointerToBuffer(const std::string& bufferID);
			///////////////////////////////////////////////////////////////////////////////////////
			/// @brief Gets names of all Buffer IDs
			///////////////////////////////////////////////////////////////////////////////////////
			std::vector<std::string> getNames();
		protected:
			std::unordered_map<std::string, AuxPort::Graphics::DrawBuffer> bufferMap;
		};

	}

}
#endif
